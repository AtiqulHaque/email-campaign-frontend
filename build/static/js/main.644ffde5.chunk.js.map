{"version":3,"sources":["components/CampaignForm.js","_constants/campaign.constants.js","_actions/campaign.actions.js","components/CampaignSummary.js","components/App.js","_reducers/campaign.reducer.js","_reducers/index.js","_helpers/store.js","index.js"],"names":["CampaignForm","props","state","campaigns_name","email_subject","email_body","status","schedule_time","attachments","handleSubmit","bind","changeHandler","handleInputChanged","event","console","log","target","value","name","attachment","this","push","files","setState","selectedFile","className","onSubmit","htmlFor","type","onChange","class","id","rows","React","Component","connectedApp","connect","campaign","campaigns","loading","CampaignConstants","loadDashboard","dispatch","fetch","BASE_URL","then","response","json","data","lists","payload","catch","err","bookRoom","params","callback","requestOptions","method","headers","Accept","body","JSON","stringify","first_name","firstname","last_name","lastname","email","reservation_date","buttonText","text","parse","ok","error","message","statusText","Promise","reject","isAvailable","checkAvailable","checkAvailableSuccess","setMessage","msg","setMessageText","CampainTemplate","CampaignSummary","loadDashBoard","container","map","article","App","errors","path","exact","component","CampaignLists","initialState","rootReducer","combineReducers","action","Object","assign","middleware","createLogger","thunkMiddleware","store","createStore","compose","applyMiddleware","searchDom","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.644ffde5.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nclass CampaignForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      campaigns_name: \"\",\n      email_subject: \"\",\n      email_body: \"\",\n      status: \"\",\n      schedule_time: \"\",\n      attachments: [],\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.changeHandler = this.changeHandler.bind(this);\n    this.handleInputChanged = this.handleInputChanged.bind(this);\n  }\n\n  handleInputChanged(event) {\n    console.log(event.target.value, event.target.name);\n  }\n\n  handleSubmit() {}\n\n  changeHandler(event) {\n    let attachment = this.state.attachments.push(event.target.files[0]);\n    this.setState({ selectedFile: attachment });\n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"mb-3\">\n              <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">\n                Campain Name\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                onChange={this.handleInputChanged}\n                aria-describedby=\"emailHelp\"\n              />\n            </div>\n            <div class=\"mb-3\">\n              <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\n                Email Subject\n              </label>\n              <input\n                type=\"text\"\n                name=\"email_subject\"\n                className=\"form-control\"\n                id=\"exampleInputPassword1\"\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\n                Email Body\n              </label>\n              <textarea\n                name=\"email_body\"\n                className=\"form-control\"\n                id=\"exampleFormControlTextarea1\"\n                rows=\"3\"\n              ></textarea>\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\n                Add contact CSV\n              </label>\n              <input\n                onChange={this.changeHandler}\n                type=\"file\"\n                className=\"form-control-file\"\n                id=\"exampleFormControlFile1\"\n              />\n            </div>\n\n            <div className=\"mb-3 form-check\">\n              <input\n                name=\"status\"\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                id=\"exampleCheck1\"\n                value=\"1\"\n              />\n              <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">\n                Enable\n              </label>\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Submit\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state);\n  const { campaigns, loading } = state.campaign;\n  return {\n    loading,\n    campaigns,\n  };\n}\n\nconst connectedApp = connect(mapStateToProps)(CampaignForm);\nexport { connectedApp as CampaignForm };\n","export const CampaignConstants = {\n  CAMPAIGN_LIST_SUCCESS: \"CAMPAIGN_LIST_SUCCESS\",\n  LOADING: \"LOADING\",\n  CAMPAIGN_SUBMIT: \"CAMPAIGN_SUBMIT\",\n  CAMPAIGN_SUBMIT_SUCCESS: \"CAMPAIGN_SUBMIT_SUCCESS\",\n  AVAILABLE_SUCCESS: \"AVAILABLE_SUCCESS\",\n  AVAILABLE_LOADING: \"AVAILABLE_LOADING\",\n  MESSAGE_SET: \"MESSAGE_SET\",\n  CAMPAIGN_SUBMIT_LOADING: \"CAMPAIGN_SUBMIT_LOADING\",\n};\n","import { CampaignConstants } from \"../_constants\";\n\nexport const campaign = {\n  loadDashboard,\n  bookRoom,\n  checkAvailable,\n  setMessage,\n};\n\nconst BASE_URL = \"http://localhost:3000\";\n\nconst getBookingListSuccess = (lists) => ({\n  type: CampaignConstants.CAMPAIGN_LIST_SUCCESS,\n  payload: lists,\n});\n\nconst bookSuccess = (isAvailable, buttonText, message) => ({\n  type: CampaignConstants.CAMPAIGN_SUBMIT_SUCCESS,\n  payload: { isAvailable, buttonText, message },\n});\nconst checkAvailableSuccess = (isAvailable, buttonText, message) => ({\n  type: CampaignConstants.AVAILABLE_SUCCESS,\n  payload: { isAvailable, buttonText, message },\n});\n\nconst checkAvailableLodaing = (buttonText) => ({\n  type: CampaignConstants.AVAILABLE_LOADING,\n  payload: { buttonText },\n});\n\nconst setMessageText = (msg) => ({\n  type: CampaignConstants.MESSAGE_SET,\n  payload: { message: msg },\n});\n\nconst setButtonText = (msg) => ({\n  type: CampaignConstants.CAMPAIGN_SUBMIT_LOADING,\n  payload: { buttonText: msg },\n});\n\nfunction loadDashboard() {\n  return (dispatch) => {\n    fetch(BASE_URL + \"/campaign/lists\")\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch(getBookingListSuccess(data.payload));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n}\n\nfunction setMessage(msg) {\n  return (dispatch) => {\n    dispatch(setMessageText(msg));\n  };\n}\n\nfunction bookRoom(params, callback) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      first_name: params.firstname,\n      last_name: params.lastname,\n      email: params.email,\n      reservation_date: params.reservation_date,\n    }),\n  };\n\n  return (dispatch) => {\n    dispatch(setButtonText(\"Please wait & Processing....\"));\n\n    fetch(BASE_URL + \"book/room\", requestOptions).then((response) => {\n      return response.text().then((text) => {\n        const data = text && JSON.parse(text);\n\n        if (!response.ok) {\n          const error = (data && data.message) || response.statusText;\n          return Promise.reject(error);\n        }\n        dispatch(\n          bookSuccess(\n            false,\n            \"Check Availability\",\n            \"Your room has been successfully booked, Thanks.\"\n          )\n        );\n        callback();\n      });\n    });\n  };\n}\n\nfunction checkAvailable(params) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      reservation_date: params.reservation_date,\n    }),\n  };\n\n  return (dispatch) => {\n    dispatch(checkAvailableLodaing(\"Checking...\"));\n\n    fetch(BASE_URL + \"check/room-available\", requestOptions).then(\n      (response) => {\n        return response.text().then((text) => {\n          const data = text && JSON.parse(text);\n\n          if (!response.ok) {\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n          }\n\n          let isAvailable = data.payload === \"free\";\n\n          let buttonText = isAvailable ? \"Book Now\" : \"Check Availability\";\n          let message = isAvailable\n            ? \"Yes you can Book Now.\"\n            : \"Sorry!! Room has been Already Booked.\";\n\n          dispatch(checkAvailableSuccess(isAvailable, buttonText, message));\n        });\n      }\n    );\n  };\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { campaign } from \"../_actions\";\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    loadDashBoard: (article) => dispatch(campaign.loadDashboard(article)),\n  };\n}\n\nlet CampainTemplate = (props) => {\n  return (\n    <div className=\"col-xl-3 col-md-6 mb-4\">\n      <div className=\"card border-left-primary shadow h-100 py-2\">\n        <div className=\"card-body\">\n          <div className=\"row no-gutters align-items-center\">\n            <div className=\"col mr-2\">\n              <div className=\"text-xs font-weight-bold text-primary text-uppercase mb-1\">\n                {props.data.campaigns_name}\n              </div>\n              <div className=\"h5 mb-0 font-weight-bold text-gray-800\">\n                {props.data.status === 1 ? \"Enable\" : \"Disable\"}\n              </div>\n            </div>\n            <div className=\"col-auto\">\n              <i className=\"fas fa-envelope-open-text fa-2x text-gray-300\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nclass CampaignSummary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.props.loadDashBoard();\n  }\n\n  render() {\n    let container = [];\n    this.props.campaigns.map((data) => {\n      return container.push(<CampainTemplate data={data} />);\n    });\n\n    return <div className=\"row\">{container}</div>;\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log(state);\n  const { campaigns, loading } = state.campaign;\n  return {\n    loading,\n    campaigns,\n  };\n}\n\nconst connectedApp = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CampaignSummary);\nexport { connectedApp as CampaignSummary };\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { CampaignForm } from \"./CampaignForm\";\nimport { CampaignSummary } from \"./CampaignSummary\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      errors: [],\n    };\n  }\n\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" exact component={CampaignSummary} />\n        <Route path=\"/campaign-lists\" component={CampaignLists} />\n        <Route path=\"/campaign-add\" component={CampaignForm} />\n      </Router>\n    );\n  }\n}\n\nfunction CampaignLists() {\n  return <h1 className=\"h3 mb-4 text-gray-800\">Blank Page</h1>;\n}\n\nexport { App };\n","import { CampaignConstants } from \"../_constants\";\n\nconst initialState = {\n  loading: false,\n  campaigns: [],\n  isAvailable: false,\n  buttonText: \"Check Availability\",\n  message: \"\",\n};\n\nexport function campaign(state = initialState, action) {\n  switch (action.type) {\n    case CampaignConstants.LOADING:\n      return Object.assign({}, state, {\n        loading: action.payload,\n      });\n\n    case CampaignConstants.CAMPAIGN_LIST_SUCCESS:\n      return Object.assign({}, state, {\n        campaigns: action.payload,\n      });\n\n    case CampaignConstants.AVAILABLE_SUCCESS:\n      return Object.assign({}, state, {\n        isAvailable: action.payload.isAvailable,\n        buttonText: action.payload.buttonText,\n        message: action.payload.message,\n      });\n\n    case CampaignConstants.CAMPAIGN_SUBMIT_LOADING:\n      return Object.assign({}, state, {\n        buttonText: action.payload.buttonText,\n      });\n\n    case CampaignConstants.CAMPAIGN_SUBMIT_SUCCESS:\n      return Object.assign({}, state, {\n        isAvailable: action.payload.isAvailable,\n        buttonText: action.payload.buttonText,\n        message: action.payload.message,\n      });\n    case CampaignConstants.AVAILABLE_LOADING:\n      return Object.assign({}, state, {\n        buttonText: action.payload.buttonText,\n      });\n    case CampaignConstants.MESSAGE_SET:\n      return Object.assign({}, state, {\n        message: action.payload.message,\n      });\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { campaign } from \"./campaign.reducer\";\n\nconst rootReducer = combineReducers({\n  campaign,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware,compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from '../_reducers';\n\nconst loggerMiddleware = createLogger();\n\nlet middleware = [];\n\nif (process.env.NODE_ENV === 'development') {\n    middleware = [...middleware, thunkMiddleware, loggerMiddleware];\n} else {\n    middleware = [...middleware, thunkMiddleware];\n}\nexport const store = createStore(\n    rootReducer,\n    compose(applyMiddleware(...middleware))\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './components/App';\nimport { store } from './_helpers';\n\n\nconst searchDom  = document.getElementById('root');\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    searchDom\n);\n\n\n\n\n"],"sourceRoot":""}